- name: Start the chrony service
  service: 
    name: chronyd
    state: started
    enabled: yes

- name: ensure warning banner is configured properly
  copy:
    src: "{{ item }}"
    dest: "/etc/{{ item }}"
    owner: root
    group: root
    mode: '0644'
  loop:
    - motd
    - issue
    - issue.net
- name: Remove cockpit banner
  file:
    state: absent
    path: "{{ item }}"
  loop:
  - /etc/issue.d/cockpit.issue
  - /etc/motd.d/cockpit

- name: make sure line 'dns=none' is set in /etc/NetworkManager/NetworkManager.conf
  ini_file:
    path: /etc/NetworkManager/NetworkManager.conf
    state: present
    no_extra_spaces: yes
    section: main
    option: dns
    value: none
    owner: root
    group: root
    mode: 0644
    backup: yes
  notify:
    - reload NetworkManager

- name: deploy resolv.conf template
  template:
    src: resolv.conf.j2
    dest: /etc/resolv.conf
    owner: root
    group: root
    mode: 0644
    backup: yes
  notify:
    - reload NetworkManager

- name: Create /etc/yum.repos.d/kubernetes.repo
  copy:
    dest: /etc/yum.repos.d/kubernetes.repo
    content: |
      [kubernetes]
      name=Kubernetes
      baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
      enabled=1
      gpgcheck=1
      gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key

- name: Execute 'rpm-ostree refresh-md'
  ansible.builtin.raw: rpm-ostree refresh-md
  register: rpm_ostree_output

- name: Print rpm-ostree output
  ansible.builtin.debug:
    var: rpm_ostree_output.stdout_lines

- name: Install kubelet, kubeadm, kubectl
  shell: rpm-ostree install -y kubelet kubeadm kubectl --idempotent

# sudo firewall-cmd --zone=public --permanent --add-port=6443/tcp # Kubernetes API server
# sudo firewall-cmd --zone=public --permanent --add-port=2379-2380/tcp # etcd server client API
# sudo firewall-cmd --zone=public --permanent --add-port=10250/tcp # kubelet api
# sudo firewall-cmd --zone=public --permanent --add-port=10251/tcp # kube-scheduler
# sudo firewall-cmd --zone=public --permanent --add-port=10252/tcp # kube-controller-manager
# sudo firewall-cmd --zone=public --permanent --add-port=10255/tcp # Read-only Kubelet API
# sudo firewall-cmd --zone=public --permanent --add-port=5473/tcp # ClusterControlPlaneConfig API
# sudo firewall-cmd --zone=public --permanent --add-port=4789/udp # flannel overlay network
# sudo firewall-cmd --zone=public --permanent --add-port=8285/udp # flannel vxlan
# sudo firewall-cmd --zone=public --permanent --add-port=8472/udp # flannel udp
# - name: permit traffic in public zone for services
#   firewalld:
#     zone: public
#     port: "{{ item.port }}"
#     permanent: yes
#     state: enabled
#   loop:
#     - { port: 6443/tcp }
#     - { port: 2379-2380/tcp }
#     - { port: 10250/tcp }
#     - { port: 10251/tcp }
#     - { port: 10252/tcp }
#     - { port: 10255/tcp }
#     - { port: 5473/tcp }
#     - { port: 4789/udp }
#     - { port: 8285/udp }
#     - { port: 8472/udp }