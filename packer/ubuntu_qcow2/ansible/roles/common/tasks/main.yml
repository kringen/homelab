---
- name: Copy usage file to motd directory
  copy:
      src: 94-usage
      dest: /etc/update-motd.d/94-usage
      owner: root
      group: root
      mode: '0755'
- name: Turn off swap
  shell: |
    swapoff -a

- name: Disable swap  
  lineinfile:
    path: /etc/fstab
    regexp: '\sswap\s'
    state: absent

# - name: Put SELinux in permissive mode, logging actions that would be blocked.
#   selinux:
#     policy: targeted
#     state: permissive

- name: Load the required kernel modules 
  modprobe:
    name: "{{ item }}"
    state: present
  with_items:
    - br_netfilter
    - overlay

# Istio was having issues with iptables so ran these commands on worker nodes:
# https://github.com/istio/istio/issues/23009
# modprobe br_netfilter ; modprobe nf_nat ; modprobe xt_REDIRECT ; modprobe xt_owner; modprobe iptable_nat; modprobe iptable_mangle; modprobe iptable_filter

- name: Get Kubernetes package key
  shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

- name: Install Kubernetes repository
  apt_repository:
    filename: kubernetes
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /"

- name: Install Kubernetes Packages
  package: name={{ item }} state=present force=yes install_recommends=no
  loop:
  - containerd
  - kubelet
  - kubeadm
  - kubectl

- name: Persist kernel module loading  
  copy:
    dest: /etc/modules-load.d/k8s.conf 
    content: |
      br_netfilter
      overlay
      nf_nat
      xt_REDIRECT
      xt_owner
      iptable_nat
      iptable_mangle
      iptable_filter

- name: Tune sysctl parameters  in /proc and the sysctl file
  sysctl:
    name: "{{ item }}" 
    value: '1'
    sysctl_set: yes
    state: present
  with_items:
    - net.ipv4.ip_forward
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables

- name: create containerd directory
  shell: mkdir -p /etc/containerd
  
- name: Dump default configuration for containerd
  shell: containerd config default > /etc/containerd/config.toml

- name: Configure crictl to use containerd
  copy:
    dest: /etc/crictl.yaml
    content: |
      runtime-endpoint: unix:///run/containerd/containerd.sock
      image-endpoint: unix:///run/containerd/containerd.sock
      timeout: 10
      debug: false

- name: Enable and start the required services (containerd.io, kubelet) 
  systemd:
    name: "{{ item }}" 
    enabled: yes
    state: started
  with_items:
    - containerd
    - kubelet

- name: deploy resolv.conf template
  template:
    src: resolv.conf.j2
    dest: /etc/resolv.conf
    owner: root
    group: root
    mode: 0644
    backup: yes
